1 - update database and add a function to store models using pickle
2 - change the predict_next_state_and_probabilities so it would return instede of print
3 - add a santiment model for predicting public santiment on stocks
4 - needs to fix calculate rsi

__strategies__
1. Mean Reversion Trading:
Concept: This strategy assumes that asset prices will revert to their historical average or mean over time.
Python Implementation: Use statistical techniques such as Bollinger Bands or the Relative Strength Index (RSI) to identify overbought or oversold conditions.

2. Trend Following:
Concept: This strategy relies on identifying and following the prevailing market trends.
Python Implementation: Utilize moving averages or trend indicators like the Moving Average Convergence Divergence (MACD) to detect trends and generate buy/sell signals.

3. Pairs Trading:
Concept: This strategy involves trading two correlated assets simultaneously, taking advantage of temporary divergences in their prices.
Python Implementation: Analyze the historical price relationship between two assets and create trading signals based on deviations from their expected spread.

4. Statistical Arbitrage:
Concept: Exploiting price inefficiencies in related financial instruments through statistical models.
Python Implementation: Develop a cointegration model or use machine learning techniques to identify mispricing and generate trading signals.

5. Machine Learning-Based Strategies:
Concept: Use advanced machine learning algorithms to analyze market data and make trading decisions.
Python Implementation: Implement machine learning models such as decision trees, random forests, or neural networks for predicting price movements.

6. Volatility Trading:
Concept: Exploit changes in market volatility to make trading decisions.
Python Implementation: Calculate historical volatility, use options strategies like straddle or strangle, or implement the Volatility Index (VIX) as a trading signal.

7. Momentum Trading:
Concept: Capitalize on the continuation of existing trends by entering trades in the direction of the prevailing momentum.
Python Implementation: Use momentum indicators like the Relative Strength Index (RSI) or rate of change (ROC) to identify strong trends and generate buy/sell signals.

8. Event-Driven Strategies:
Concept: Trade based on specific events, such as earnings announcements or economic releases.
Python Implementation: Develop algorithms that react to predefined events, leveraging sentiment analysis or natural language processing to assess news and social media sentiment.

9. Market Making:
Concept: Act as a liquidity provider by continuously quoting buy and sell prices, profiting from the bid-ask spread.
Python Implementation: Implement algorithms that adjust bid and ask prices based on market conditions, ensuring a profit margin from the spread.

10. Risk Parity:
Concept: Allocate capital based on the risk contribution of each asset in the portfolio, aiming for a balanced risk exposure.
Python Implementation: Utilize optimization techniques to allocate capital proportionally to assets, considering their historical volatility and correlation.